apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'jacoco'
apply plugin: "com.github.kt3k.coveralls"

android {
    compileSdkVersion compile_sdk_version as int
    buildToolsVersion build_tools_version
    defaultConfig {
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
        }
        debug {
            testCoverageEnabled true
        }
    }
}

jacoco {
    // latest: 0.7.9 but not work with robolectric
    // ref: http://qiita.com/teracy/items/fee05cb68022f8241825
    toolVersion = "0.7.1+"
}

def coverageSourceDirs = ['src/main/java']
def coverageExcludeFiles = ['**/R.class', '**/R$*.class', '**/DataBindingInfo.class', '**/android/databinding/*.*', '**/com/android/**/*.*', '**/BR.class']


task jacoco(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/jacoco/html/${project.name}"
        classDirectories = files(
                fileTree(
                        dir: "${buildDir}/intermediates/classes/debug",
                        exclude: coverageExcludeFiles))
    }
    sourceDirectories = files(coverageSourceDirs)
    executionData = files "${buildDir}/jacoco/testDebugUnitTest.exec"

    doLast {
        println "jacoco html report has been generated to file://${reports.html.destination}/index.html"
    }
}

coveralls {
    jacocoReportPath = "build/reports/jacoco/xml/prefkit.xml"
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:3.6.2'
    testCompile "org.robolectric:robolectric:3.3.1"
}
